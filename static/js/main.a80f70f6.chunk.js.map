{"version":3,"sources":["components/Header/Header.js","components/SearchBar/SearchBar.js","components/TableData/TableData.js","components/TableHeader/TableHeader.js","utils/API.js","components/TableArea/TableArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","onSubmit","this","props","handleSubmit","name","value","search","onChange","handleInputChange","TableData","employees","map","employee","scope","src","picture","medium","alt","first","last","phone","email","format","dob","date","TableHeader","getEmployeeName","query","axios","get","TableArea","state","componentDidMount","loadEmployees","event","target","setState","then","response","console","log","data","results","catch","err","searchEmployee","filter","filteredList","item","Object","values","join","toLowerCase","indexOf","filteredEmployees","handleInputSubmit","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a80f70f6.chunk.js","sourcesContent":["import React from \"react\";\nimport  \"./Header.css\";\n\nexport default class Header extends React.Component {\n\nrender(){\n    return (\n      <div>\n        <div className=\"jumbo jumbotron-fluid\">\n          <div className=\"header\">\n            <h1 className=\"text-center text-white\">Employee Directory</h1>\n            <p className=\"lead text-center text-white\">Search for Employees. Sort by category or filter by property</p>\n\n          </div>\n        </div>\n      </div>\n    \n    )\n}\n\n}\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport default class SearchBar extends React.Component {\n        \n    \n    render() {\n    return (\n            \n                <form onSubmit={this.props.handleSubmit}>\n                    <input\n                        name=\"search\"\n                        value={this.props.search}\n                        onChange={this.props.handleInputChange}>\n\n                     </input>       \n                      <button className=\"btn-primary btn-outline-dark\">\n                        Search\n                    </button>\n                </form>\n            \n        )\n    };\n};\n\n\n","import React from \"react\";\nimport Moment from 'react-moment';\nimport \"../TableData/TableData.css\";\nexport default class TableData extends React.Component {\n\n\n\n    render() {\n        return (\n            <div>\n\n                <table className=\"table\">\n\n\n                    <tbody>\n\n                        {/* Map Works */}\n                        {/* Moment works */}\n\n                        {this.props.employees.map((employee) => (\n                            // Key \n                            < tr >\n                                <th scope=\"row\"></th>\n\n                                <td>\n                                    <img\n                                        src={employee.picture.medium}\n                                        alt='employee'\n                                    />\n                                </td>\n\n\n                                <td>{employee.name.first} {employee.name.last}</td>\n                                <td>{employee.phone}</td>\n                                <td>{employee.email}</td>\n                                <Moment format=\"MM/DD/YYYY\">\n                                    <td>{employee.dob.date}</td>\n                                </Moment>\n                            </tr>\n\n                        ))}\n\n\n                    </tbody>\n                </table>\n            </div >\n\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","import React from \"react\";\nimport \"./TableHeader.css\";\n\n\nexport default class TableHeader extends React.Component {\n\n\n\n  render() {\n    return (\n        <div>\n            <table className=\"table\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th scope=\"col\">Image</th>\n\n\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Phone</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">DOB</th>\n                    </tr>\n                </thead>\n               \n            </table>\n        </div>\n    )\n}\n}\n\n\n// function TableHeader({employees, SortByName }) {\n//   return (\n//     <div>\n//       <table>\n//         <thead>\n//           <tr>\n//             {this.props.employees.map(({ name, width }) => {\n//               return (\n//                 <th\n//                   className=\"col\"\n//                   key={name}\n//                   style={{ width }}\n//                   handleClick={() => {\n//                     this.nameSortByName());\n//                   }}\n//                 >\n//                   {name}\n//                   <span className=\"pointer\"></span>\n//                 </th>\n//               );\n//             })}\n//           </tr>\n//         </thead>\n\n//         <TableData employees={employees} />\n//       </table>\n//     </div>\n//   );\n// }\n\n// export default TableHeader;\n\n\n\n","import axios from \"axios\";\n\n\nexport default function getEmployeeName(query) {\n   \n    const BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n    return axios.get(BASEURL);\n\n\n};","import React from 'react';\nimport Header from \"../Header/Header\";\nimport SearchBar from '../SearchBar/SearchBar';\nimport TableData from '../TableData/TableData';\nimport TableHeader from '../TableHeader/TableHeader';\nimport getEmployeeName from \"../../utils/API\";\n\n\n\nexport default class TableArea extends React.Component {\n\n\n    state = {\n      search: \"name\",\n      employees: [],\n\n\n    };\n    // last search is staying on page\n    componentDidMount = () => {\n        this.loadEmployees();\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState(\n            {\n                [name]: value\n            }\n        )\n    }\n\n    loadEmployees = () => [\n        getEmployeeName()\n            .then((response) => {\n                console.log(response);\n                this.setState(\n                    {\n                        // API returns \"results\" \n                        employees: response.data.results\n                    }\n                )\n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    ]\n\n\n    // Working, but last search is not staying on page\n    searchEmployee = () => [\n        getEmployeeName()\n            .then((response) => {\n\n                console.log(response);\n\n                const filter = this.state.search;\n\n                const filteredList = response.data.results.filter(item => {\n                   \n                    let values = Object.values(item.name.first)\n                        .join(\"\")\n                        .toLowerCase();\n                    return values.indexOf(filter.toLowerCase()) !== -1;\n                });\n                  this.setState({\n                        filteredEmployees: filteredList})\n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    ]\n\n\n\n\n    handleInputSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"handled submit\");\n     \n\n        this.searchEmployee();\n\n    }\n\n \n    render() {\n        return (\n            <div className=\"wrapper\" >\n            \n                <Header />\n                <SearchBar\n                    search={this.state.search}\n                    handleInputChange={this.handleInputChange}\n                    handleSubmit={this.handleInputSubmit}\n                />\n               \n                <TableHeader />\n                <TableData\n                    employees={this.state.employees}\n                />\n        \n            </div>\n        );\n    }\n\n}","import React from 'react';\n// import Main from \"./components/Main/Main\";\n// import Header from \"./components/Header/Header\";\nimport TableArea from './components/TableArea/TableArea';\n\n// import \"./App.css\"\n\n\nfunction App() {\n  return (\n    <div>\n    \n        {/* <Header /> */}\n        {/* <Main />  */}\n      <TableArea>\n\n\n        \n     </TableArea>\n\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === \"[::1]\" ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              \"This web app is being served cache-first by a service \" +\n                \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n      });\n  }\n  \n  export function unregister() {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  \n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}